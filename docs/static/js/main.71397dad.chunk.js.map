{"version":3,"sources":["Expenses.js","AddExpense.js","App.js","serviceWorker.js","index.js"],"names":["Expenses","expenses","deleteExpense","expenseList","map","expense","key","id","description","price","onClick","AddExpense","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addExpense","onSubmit","this","type","onChange","placeholder","Component","App","Math","random","newExpenses","filter","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAqBeA,EAnBE,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cAEtBC,EAAcF,EAASG,KAAI,SAAAC,GAC/B,OACE,yBAAKC,IAAKD,EAAQE,IAChB,4BAAMF,EAAQG,aACd,4BAAMH,EAAQI,MAAd,KACA,4BAAQC,QAAS,kBAAMR,EAAcG,EAAQE,MAA7C,WAKN,OACE,6BACIJ,I,OCkBOQ,E,4MA/BbC,MAAQ,CACNJ,YAAa,GACbC,MAAO,I,EAGTI,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAEE,OAAOT,GAAKO,EAAEE,OAAOC,S,EAI5BC,aAAe,SAACJ,GACdA,EAAEK,iBACF,EAAKC,MAAMC,WAAW,EAAKT,OAC3B,EAAKG,SAAS,CACZP,YAAa,GACbC,MAAO,M,uDAKT,OACE,0BAAMa,SAAUC,KAAKL,cACnB,2BAAOM,KAAK,OAAOjB,GAAG,cAAckB,SAAUF,KAAKV,aAAca,YAAY,cAAcT,MAAOM,KAAKX,MAAMJ,cAC7G,2BAAOgB,KAAK,SAASjB,GAAG,QAAQkB,SAAUF,KAAKV,aAAea,YAAY,IAAIT,MAAOM,KAAKX,MAAMH,QAChG,oD,GA1BiBkB,aCkCVC,E,4MA/BbhB,MAAQ,CACNX,SAAU,CACR,CAAEM,GAAI,EAAGC,YAAa,cAAeC,MAAO,M,EAIhDY,WAAa,SAAChB,GACZA,EAAQE,GAAKsB,KAAKC,SAClB,EAAKf,SAAS,CACZd,SAAS,GAAD,mBAAM,EAAKW,MAAMX,UAAjB,CAA2BI,O,EAIvCH,cAAgB,SAACK,GACf,IAAMwB,EAAc,EAAKnB,MAAMX,SAAS+B,QAAO,SAAA3B,GAAO,OAAIA,EAAQE,KAAOA,KACzE,EAAKQ,SAAS,CACZd,SAAU8B,K,uDAKZ,OACE,yBAAKE,UAAU,OACb,2DACA,kBAAC,EAAD,CAAYZ,WAAYE,KAAKF,aAC7B,kBAAC,EAAD,CAAUpB,SAAUsB,KAAKX,MAAMX,SAAUC,cAAeqB,KAAKrB,qB,GA1BnDyB,aCQEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.71397dad.chunk.js","sourcesContent":["import React from 'react'\n\nconst Expenses = ({ expenses, deleteExpense }) => {\n  \n  const expenseList = expenses.map(expense => {\n    return (\n      <div key={expense.id}>\n        <h3>{ expense.description }</h3> \n        <h3>{ expense.price } </h3>\n        <button onClick={() => deleteExpense(expense.id)}> X </button>\n      </div>\n    )\n  })\n  \n  return (\n    <div>\n      { expenseList }\n    </div>\n  )\n}\n\nexport default Expenses","import React, { Component } from 'react'\n\nclass AddExpense extends Component {\n  state = {\n    description: '',\n    price: '',\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.addExpense(this.state)\n    this.setState({\n      description: '',\n      price: ''\n    })\n  }\n  \n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input type=\"text\" id=\"description\" onChange={this.handleChange} placeholder=\"description\" value={this.state.description}/>\n        <input type=\"number\" id=\"price\" onChange={this.handleChange}  placeholder=\"0\" value={this.state.price}/>\n        <button>Add Expense</button>\n      </form>\n    )\n  }\n}\n\nexport default AddExpense\n","import React, { Component } from 'react';\nimport Expenses from './Expenses'\nimport AddExpense from './AddExpense'\n\nclass App extends Component {\n  state = {\n    expenses: [\n      { id: 1, description: 'Bought Milk', price: 33 }\n    ]\n  }\n\n  addExpense = (expense) => {\n    expense.id = Math.random()\n    this.setState({\n      expenses: [...this.state.expenses, expense]\n    })\n  }\n\n  deleteExpense = (id) => {\n    const newExpenses = this.state.expenses.filter(expense => expense.id !== id)\n    this.setState({\n      expenses: newExpenses\n    })\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Expense Manager Application</h1>\n        <AddExpense addExpense={this.addExpense} />\n        <Expenses expenses={this.state.expenses} deleteExpense={this.deleteExpense}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}